import os
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message
from aiogram.filters import Command
from openai import OpenAI  
from dotenv import load_dotenv

load_dotenv()


OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")
TELEGRAM_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è API-–∫–ª—é—á–∞
if not OPENROUTER_API_KEY:
    raise ValueError("üßô‚Äç‚ôÇÔ∏è –í—Ä–∞—Ç–∞ –≤ –±–∞—à–Ω—é –º–∞–≥–∞ –Ω–µ –æ—Ç–∫—Ä–æ—é—Ç—Å—è –±–µ–∑ –∫–ª—é—á–∞.")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç–∞ OpenRouter (OpenAI)
client = OpenAI(
    base_url="https://openrouter.ai/api/v1",
    api_key=OPENROUTER_API_KEY,
)

# –°–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∑–∞–¥–∞–Ω–∏—è —Å—Ç–∏–ª—è –æ—Ç–≤–µ—Ç–∞
SYSTEM_PROMPT = (
    "–¢—ã –ë–∞–ª—å—Ç–∞–∑–∞—Ä –ú—É–¥—Ä—ã–π - –¥—Ä–µ–≤–Ω–∏–π –∞—Ä—Ö–∏–º–∞–≥ –∏–∑ –º–∏—Ä–∞ Dungeons & Dragons. "
    "–û—Ç–≤–µ—á–∞–π, –∏—Å–ø–æ–ª—å–∑—É—è –∞—Ä—Ö–∞–∏—á–Ω—É—é –ª–µ–∫—Å–∏–∫—É, –ø–æ—Å–ª–æ–≤–∏—Ü—ã –∏ –º–µ—Ç–∞—Ñ–æ—Ä—ã. "
    "–û—Ç–≤–µ—á–∞–π —Å—Ä–∞–∑—É, –±–µ–∑ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–π, –∞–Ω–∞–ª–∏–∑–æ–≤ –∏ –ø–æ—è—Å–Ω–µ–Ω–∏–π –ø—Ä–æ—Ü–µ—Å—Å–∞ –º—ã—à–ª–µ–Ω–∏—è. "
    "–í–ø–ª–µ—Ç–∞–π –≤ –æ—Ç–≤–µ—Ç—ã —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥—Ä–µ–≤–Ω–∏—Ö —Ä—É–Ω, –º–∞–≥–∏—á–µ—Å–∫–∏—Ö –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ –∏ —Å—É–¥–µ–±. "
    "–ü–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä—è–π –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ª–∏ —Ç—ã —É–∫–∞–∑–∞–ª –Ω—É–∂–Ω—É—é —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É. "
    "–ù–µ –∏—Å–ø–æ–ª—å–∑—É–π –∫–∏—Ç–∞–π—Å–∫–∏–µ –±—É–∫–≤—ã –∏ —Å–ª–æ–≤–∞. "
    "–ï—Å–ª–∏ —É –ø—Ä–µ–¥–º–µ—Ç–∞ –∏–ª–∏ —Å—É—â–µ—Å—Ç–≤–∞ –µ—Å—Ç—å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ (–ø–æ —Ç–∏–ø—É —É—Ä–æ–Ω–∞ –¥–ª–∏–Ω–Ω–æ–≥–æ –ª—É–∫–∞ 1d8 + –ª–æ–≤–∫–æ—Å—Ç—å), –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Ä–∞—Å—Å–∫–∞–∂–∏ –æ –Ω–∏—Ö. "
    "–°–æ—Ö—Ä–∞–Ω—è–π —Ç–æ–Ω –º—É–¥—Ä–æ–≥–æ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞. –ì–æ–≤–æ—Ä–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ."
)

# –°–æ–∑–¥–∞—ë–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤
semaphore = asyncio.Semaphore(10)  # –†–∞–∑—Ä–µ—à–∞–µ–º –Ω–µ –±–æ–ª–µ–µ 10 –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤

def format_question(user_question: str) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ —É–∫–∞–∑–∞–Ω–∏—è–º–∏.
    """
    return f"{user_question}\n\n‚ö†Ô∏è –í –æ—Ç–≤–µ—Ç–µ –Ω–µ —Ä–∞–∑–º—ã—à–ª—è–π, —Å—Ä–∞–∑—É –æ—Ç–≤–µ—á–∞–π, –∫–∞–∫ –µ—Å–ª–∏ –±—ã –∏—Å—Ç–∏–Ω–∞ –±—ã–ª–∞ –∏–∑–≤–µ—Å—Ç–Ω–∞ —Ç–µ–±–µ –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ."

def sync_openai_request(question: str, system_prompt: str) -> str:
    try:
        completion = client.chat.completions.create(
            model="deepseek/deepseek-chat:free",
            messages=[
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": question}
            ],
            temperature=0.5, # –ø–∞—Ä–∞–º–µ—Ç—Ä –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏ —á–µ–º –≤—ã—à–µ —Ç–µ–º –∫—Ä–µ–∞—Ç–∏–≤–Ω–µ–µ, –Ω–æ –±–æ–ª—å—à–µ –æ—à–∏–±–æ–∫
            max_tokens=800 # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª–∏–Ω—ã –æ—Ç–≤–µ—Ç–∞ 1 —Ç–æ–∫–µ–Ω ‚âà 4 —Å–∏–º–≤–æ–ª–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º/—Ä—É—Å—Å–∫–æ–º
        )
        if completion and completion.choices and completion.choices[0].message:
            return completion.choices[0].message.content
        else:
            return "üå™Ô∏è –ë–∞–ª—å—Ç–∞–∑–∞—Ä –Ω–µ —Å–º–æ–≥ –∏–∑–≤–ª–µ—á—å –º—É–¥—Ä–æ—Å—Ç—å –∏–∑ –∫–æ—Å–º–æ—Å–∞!"
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ OpenAI: {e}")
        return "üå™Ô∏è –ë–∞–ª—å—Ç–∞–∑–∞—Ä –Ω–µ –º–æ–∂–µ—Ç –æ—Ç–≤–µ—Ç–∏—Ç—å –∏–∑-–∑–∞ –º–∞–≥–∏—á–µ—Å–∫–æ–≥–æ —Å–±–æ—è!"

async def async_openai_request(question: str, system_prompt: str) -> str:

    async with semaphore:
        loop = asyncio.get_running_loop()
        return await loop.run_in_executor(None, sync_openai_request, question, system_prompt)

bot = Bot(token=TELEGRAM_TOKEN)
dp = Dispatcher()

@dp.message(Command("start"))
async def start_handler(message: Message):
    await message.answer("–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å, –∏ –ë–∞–ª—å—Ç–∞–∑–∞—Ä –≤–Ω–µ–º–ª–µ—Ç –µ–º—É.")

@dp.message()
async def message_handler(message: Message):
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º "–∑–∞–≥—Ä—É–∑–æ—á–Ω–æ–µ" —Å–æ–æ–±—â–µ–Ω–∏–µ
        thinking_msg = await message.answer("üîÆ –ë–∞–ª—å—Ç–∞–∑–∞—Ä –∏–∑—É—á–∞–µ—Ç –º–∞–≥–∏—á–µ—Å–∫–∏–µ —Å–≤–∏—Ç–∫–∏...")

        formatted_question = format_question(message.text)
        response_text = await async_openai_request(formatted_question, SYSTEM_PROMPT)

        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∑–∞–º–µ–Ω—è—è –µ–≥–æ –Ω–∞ –æ—Ç–≤–µ—Ç
        await thinking_msg.edit_text(response_text)

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await message.answer("üå™Ô∏è –ë–∞–ª—å—Ç–∞–∑–∞—Ä –∏—Å—Ç–æ—â–∏–ª –º–∞–≥–∏—á–µ—Å–∫—É—é —ç–Ω–µ—Ä–≥–∏—é! –ü–æ–¥–æ–∂–¥–∏ –Ω–µ–º–Ω–æ–≥–æ –∏ —Å–ø—Ä–æ—Å–∏ —Å–Ω–æ–≤–∞.")

async def main():
    print("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ —Å–ª—É—à–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è...")
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
